Key experience
 - 
 
kenapa mau masuk;
- awalnya ditawarkan opportunity oleh mba Dinda Puspita via linkedin, lalu di reach oleh mba Judith
- setelah saya mendengar penjelasannya, menarik karena tim IT nya katanya sudah banyak (banyak squad) dan masih menerapkan wfa
- issue layoff di perusahaan sebelumnya
- masih mau memperdalam golang/non-php dan banyak teknologi backend pendukungnya seperti rabbitmq, elastic, grpc, no-sql dll
- dari sisi perusahaan : laporan keuangan masih mencetak laba
  https://www.google.com/finance/quote/BFIN:IDX?hl=en&window=5Y

------------------

case redis dipakai saat apa:
- data yang sering diakses
- data yang jarang berubah (misal banner promo)
- butuh kecepatan tinggi memory
- jangan cache data hasil pencarian (pakai solr / elastic)
- jangan mengcache data aplikasi milik orang lain
- cahce data kecil saja

struktur redis:
- key , value (json)

https://roadmap.sh/java
https://roadmap.sh/golang

Non blocking IO req = Async

Concurrency menjalankan dua tugas secara paralel pada thread berbeda. 
Namun, metode asinkronus berjalan secara paralel tetapi pada 1 thread yang sama.

------------------

TPS (Transaction Processing System)
 - Batch Proccessing
   cth: pembayaran CC
   -> payment gateway -> bank (verifikasi) -> merchant akan menerima uang -> bank akan menagih ke customer di bulan berikutnya (batch)
 - Online Processing
   -> transfer atm / qris / VA / tagihan listrik, pulsa dll
   ----> produk akhir : Report , grafik


yang pernah :
 - Midtrans, Mcpay, 
    selalu ada 2 env, sandbox & production
 
 - di ciputra pernah 
  - penerimaaan pembayaran dari salesforce / va mandiri / va bca
    ----> produk akhir : journal , report
	
  - ke pembahasan h2h mandiri 
    kasir input pembayaran
	
	
	
Jenis middleware :	
	Basic Auth,Body Dump,Body Limit,Casbin Auth,CORS,CSRF,Decompress,Gzip,Jaeger,JWT,Key Auth,Logger,Method Override,Prometheus,Proxy,Rate Limiter,Recover,Redirect,Request ID,Rewrite,Secure,Session,Static,Timeout,Trailing Slash
	
	
Design Pattern	
-----------------------------
singleton :
cukup sekali  membuat objek, yang reuseable
contoh, bikin koneksi db, helper

builder:
bikin classs dengan suffix Builder , contoh CustomerBuilder
bikin setter nya
